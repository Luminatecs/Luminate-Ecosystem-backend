-- =============================================================================
-- LUMINATE ECOSYSTEM - SOFT DELETE MIGRATION
-- Adds isSoftDeleted column to all tables for soft delete functionality
-- =============================================================================

-- Add isSoftDeleted column to users table
ALTER TABLE users 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to organizations table
ALTER TABLE organizations 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to user_profiles table
ALTER TABLE user_profiles 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to registration_tokens table
ALTER TABLE registration_tokens 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to admin_details table
ALTER TABLE admin_details 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to email_verification_tokens table
ALTER TABLE email_verification_tokens 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to password_reset_tokens table
ALTER TABLE password_reset_tokens 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- Add isSoftDeleted column to user_activity_logs table
ALTER TABLE user_activity_logs 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

ALTER TABLE school_data 
ADD COLUMN is_soft_deleted BOOLEAN DEFAULT FALSE NOT NULL;

-- =============================================================================
-- CREATE INDEXES FOR SOFT DELETE QUERIES
-- =============================================================================

-- Index for users soft delete queries
CREATE INDEX idx_users_is_soft_deleted ON users(is_soft_deleted);

-- Index for organizations soft delete queries
CREATE INDEX idx_organizations_is_soft_deleted ON organizations(is_soft_deleted);

-- Index for user_profiles soft delete queries
CREATE INDEX idx_user_profiles_is_soft_deleted ON user_profiles(is_soft_deleted);

-- Index for registration_tokens soft delete queries
CREATE INDEX idx_registration_tokens_is_soft_deleted ON registration_tokens(is_soft_deleted);

-- Index for admin_details soft delete queries
CREATE INDEX idx_admin_details_is_soft_deleted ON admin_details(is_soft_deleted);

-- Index for email_verification_tokens soft delete queries
CREATE INDEX idx_email_verification_tokens_is_soft_deleted ON email_verification_tokens(is_soft_deleted);

-- Index for password_reset_tokens soft delete queries
CREATE INDEX idx_password_reset_tokens_is_soft_deleted ON password_reset_tokens(is_soft_deleted);

-- Index for user_activity_logs soft delete queries
CREATE INDEX idx_user_activity_logs_is_soft_deleted ON user_activity_logs(is_soft_deleted);

-- Index for school_data soft delete queries
CREATE INDEX idx_school_data_is_soft_deleted ON school_data(is_soft_deleted);

-- =============================================================================
-- CREATE HELPER FUNCTIONS FOR SOFT DELETE OPERATIONS
-- =============================================================================

-- Function to soft delete a user and all related records
CREATE OR REPLACE FUNCTION soft_delete_user(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    -- Soft delete the user
    UPDATE users SET is_soft_deleted = TRUE WHERE id = user_uuid;
    
    -- Soft delete user profile
    UPDATE user_profiles SET is_soft_deleted = TRUE WHERE user_id = user_uuid;
    
    -- Soft delete admin details if exists
    UPDATE admin_details SET is_soft_deleted = TRUE WHERE user_id = user_uuid;
    
    -- Soft delete user's activity logs
    UPDATE user_activity_logs SET is_soft_deleted = TRUE WHERE user_id = user_uuid;
    
    -- Soft delete tokens generated by this user
    UPDATE registration_tokens SET is_soft_deleted = TRUE WHERE generated_by = user_uuid;
    
    -- Soft delete tokens used by this user
    UPDATE registration_tokens SET is_soft_deleted = TRUE WHERE used_by = user_uuid;
    
    -- Soft delete email verification tokens
    UPDATE email_verification_tokens SET is_soft_deleted = TRUE WHERE user_id = user_uuid;
    
    -- Soft delete password reset tokens
    UPDATE password_reset_tokens SET is_soft_deleted = TRUE WHERE user_id = user_uuid;

    -- Soft delete school data
    UPDATE school_data SET is_soft_deleted = TRUE WHERE user_id = user_uuid;

    RAISE NOTICE 'User % and all related records have been soft deleted', user_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to soft delete an organization and all related records
CREATE OR REPLACE FUNCTION soft_delete_organization(org_uuid UUID)
RETURNS VOID AS $$
BEGIN
    -- Soft delete the organization
    UPDATE organizations SET is_soft_deleted = TRUE WHERE id = org_uuid;
    
    -- Soft delete all users in this organization
    UPDATE users SET is_soft_deleted = TRUE WHERE organization_id = org_uuid;
    
    -- Soft delete all registration tokens for this organization
    UPDATE registration_tokens SET is_soft_deleted = TRUE WHERE organization_id = org_uuid;
    
    -- Soft delete profiles of users in this organization
    UPDATE user_profiles SET is_soft_deleted = TRUE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);
    
    -- Soft delete admin details of users in this organization
    UPDATE admin_details SET is_soft_deleted = TRUE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);
    
    -- Soft delete activity logs of users in this organization
    UPDATE user_activity_logs SET is_soft_deleted = TRUE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);

    -- Soft delete school data
    UPDATE school_data SET is_soft_deleted = TRUE WHERE organization_id = org_uuid;

    RAISE NOTICE 'Organization % and all related records have been soft deleted', org_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to restore a soft deleted user
CREATE OR REPLACE FUNCTION restore_user(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    -- Restore the user
    UPDATE users SET is_soft_deleted = FALSE WHERE id = user_uuid;
    
    -- Restore user profile
    UPDATE user_profiles SET is_soft_deleted = FALSE WHERE user_id = user_uuid;
    
    -- Restore admin details if exists
    UPDATE admin_details SET is_soft_deleted = FALSE WHERE user_id = user_uuid;

    -- Restore school data if exists
    UPDATE school_data SET is_soft_deleted = FALSE WHERE user_id = user_uuid;

    -- Note: Activity logs and tokens are not automatically restored
    -- as they might need individual consideration
    
    RAISE NOTICE 'User % has been restored from soft delete', user_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to restore a soft deleted organization
CREATE OR REPLACE FUNCTION restore_organization(org_uuid UUID)
RETURNS VOID AS $$
BEGIN
    -- Restore the organization
    UPDATE organizations SET is_soft_deleted = FALSE WHERE id = org_uuid;

    -- Restore all users in this organization
    UPDATE users SET is_soft_deleted = FALSE WHERE organization_id = org_uuid;

    -- Restore all registration tokens for this organization
    UPDATE registration_tokens SET is_soft_deleted = FALSE WHERE organization_id = org_uuid;

    -- Restore profiles of users in this organization
    UPDATE user_profiles SET is_soft_deleted = FALSE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);

    -- Restore admin details of users in this organization
    UPDATE admin_details SET is_soft_deleted = FALSE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);

    -- Restore activity logs of users in this organization
    UPDATE user_activity_logs SET is_soft_deleted = FALSE 
    WHERE user_id IN (SELECT id FROM users WHERE organization_id = org_uuid);

    -- Restore school data
    UPDATE school_data SET is_soft_deleted = FALSE WHERE organization_id = org_uuid;

    RAISE NOTICE 'Organization % has been restored from soft delete', org_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to permanently delete all soft deleted records (no expiry)
CREATE OR REPLACE FUNCTION cleanup_soft_deleted_records()
RETURNS VOID AS $$
BEGIN
    -- Delete all soft deleted activity logs
    DELETE FROM user_activity_logs 
    WHERE is_soft_deleted = TRUE;
    
    -- Delete all soft deleted tokens
    DELETE FROM email_verification_tokens 
    WHERE is_soft_deleted = TRUE;
    
    DELETE FROM password_reset_tokens 
    WHERE is_soft_deleted = TRUE;
    
    DELETE FROM registration_tokens 
    WHERE is_soft_deleted = TRUE;
    
    -- Delete all soft deleted school data
    DELETE FROM school_data 
    WHERE is_soft_deleted = TRUE;
    
    -- Delete all soft deleted profiles and admin details
    DELETE FROM admin_details 
    WHERE is_soft_deleted = TRUE;
    
    DELETE FROM user_profiles 
    WHERE is_soft_deleted = TRUE;
    
    -- Delete all soft deleted users (do this last due to foreign key constraints)
    DELETE FROM users 
    WHERE is_soft_deleted = TRUE;
    
    -- Delete all soft deleted organizations (do this last)
    DELETE FROM organizations 
    WHERE is_soft_deleted = TRUE;
    
    RAISE NOTICE 'Cleanup completed for all soft deleted records';
END;
$$ LANGUAGE plpgsql;

-- =============================================================================
-- CREATE VIEWS FOR ACTIVE (NON-SOFT-DELETED) RECORDS
-- =============================================================================

-- View for active users only
CREATE VIEW active_users AS
SELECT * FROM users WHERE is_soft_deleted = FALSE;

-- View for active organizations only
CREATE VIEW active_organizations AS
SELECT * FROM organizations WHERE is_soft_deleted = FALSE;

-- View for active user profiles only
CREATE VIEW active_user_profiles AS
SELECT * FROM user_profiles WHERE is_soft_deleted = FALSE;

-- View for active registration tokens only
CREATE VIEW active_registration_tokens AS
SELECT * FROM registration_tokens WHERE is_soft_deleted = FALSE;

-- View for active admin details only
CREATE VIEW active_admin_details AS
SELECT * FROM admin_details WHERE is_soft_deleted = FALSE;

-- View for active school data only
CREATE VIEW active_school_data AS
SELECT * FROM school_data WHERE is_soft_deleted = FALSE;

-- =============================================================================
-- SUMMARY
-- =============================================================================

DO $$
BEGIN
    RAISE NOTICE '=============================================================================';
    RAISE NOTICE 'SOFT DELETE MIGRATION COMPLETED SUCCESSFULLY';
    RAISE NOTICE '=============================================================================';
    RAISE NOTICE 'Added is_soft_deleted column to all tables';
    RAISE NOTICE 'Created indexes for efficient soft delete queries';
    RAISE NOTICE 'Created helper functions:';
    RAISE NOTICE '  - soft_delete_user(uuid)';
    RAISE NOTICE '  - soft_delete_organization(uuid)';
    RAISE NOTICE '  - restore_user(uuid)';
    RAISE NOTICE '  - restore_organization(uuid)';
    RAISE NOTICE '  - cleanup_soft_deleted_records() [NO EXPIRY - deletes all soft deleted]';
    RAISE NOTICE 'Created views for active records only';
    RAISE NOTICE '=============================================================================';
    RAISE NOTICE 'Usage Examples:';
    RAISE NOTICE '  SELECT soft_delete_user(''user-uuid-here'');';
    RAISE NOTICE '  SELECT restore_user(''user-uuid-here'');';
    RAISE NOTICE '  SELECT cleanup_soft_deleted_records(); -- Permanently delete ALL soft deleted';
    RAISE NOTICE '  SELECT * FROM active_users;';
    RAISE NOTICE '  SELECT * FROM active_school_data;';
    RAISE NOTICE '=============================================================================';
END $$;
